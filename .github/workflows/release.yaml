# 参考：https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/github-actions.md
# semantic-release 不会在拉取请求时生成版本
name: Release

on:
    push:
        branches:
            - main

permissions:
    contents: read # for checkout

jobs:
    release:
        name: Release
        runs-on: ubuntu-latest
        permissions:
            contents: write # 允许发布 GitHub 版本
            issues: write # 允许对已发布的问题进行评论
            pull-requests: write # 允许对已提交的拉取请求进行评论
            id-token: write # 启用OIDC进行npm来源验证
        steps:
            # 1. 检出代码
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # 需要完整历史记录以分析提交信息

            # 2. 设置Node.js环境
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "lts/*"

            # 3. 安装依赖
            - name: Install dependencies
              run: |
                  npm install -g pnpm # 没有 package-lock.json 文件，无法使用 npm clean-install
                  pnpm install --frozen-lockfile

            # 4. 允许 semantic-release
            - name: Run semantic-release
              id: semantic # 后续的条件步骤需要用到
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: npx semantic-release

            # 5. 条件步骤，在发布新版本号后合并到develop分支
            - name: Merge main into develop
              run: |
                  echo "Semantic-release published a new version. Merging main into develop."

                  # 配置 Git 用户信息，以便 Git 提交
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

                  # 切换到 develop 分支
                  git switch develop

                  # 合并 main 分支到 develop。使用 --no-ff 保留合并提交历史。
                  # 使用 steps.semantic.outputs.next_release_tag 获取新发布的版本号作为合并提交信息。
                  git merge main --no-ff -m "Merge main after release ${{ steps.semantic.outputs.next_release_tag }}"

                  # 将 develop 分支的更改推送到远程仓库
                  git push origin develop

              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
